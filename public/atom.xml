<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RB Design]]></title>
  <link href="http://code.rwboyer.com/atom.xml" rel="self"/>
  <link href="http://code.rwboyer.com/"/>
  <updated>2012-01-09T22:10:42-05:00</updated>
  <id>http://code.rwboyer.com/</id>
  <author>
    <name><![CDATA[R W Boyer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The First Post of the Year]]></title>
    <link href="http://code.rwboyer.com/blog/2012/01/09/first-post-of-the-year/"/>
    <updated>2012-01-09T22:08:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2012/01/09/first-post-of-the-year</id>
    <content type="html"><![CDATA[<p>The first post of the new year. Actually the first post in quite a while. As the bad guy in Raiders of the Lost Ark would say; &#8220;What shall we talk about?&#8221;. Today I am going to talk about a particular new year&#8217;s resolution of mine. I have plenty of them but this particular one has nothing to do with photography. This one has to do with technology. It&#8217;s long and kinda boring so if you are not into the workings of the web and some related stuff you definitely want to move on now.</p>

<p>The new years resolution on my mind for the last 10 days has to do with the <em>cobbler&#8217;s children go without shoes effect</em>. A couple of things that I specialize in are efficient workflows, elegant technology solutions, and <em>big organization tech</em> for individuals and small scale operations. As part of that I develop, design, and manage the implementation and the operations of those solutions. When it comes to my own &#8220;tech&#8221; - it&#8217;s a mess. A little bit here, a little bit there, a sprinkle of this and a sprinkle of thatâ€¦</p>

<p>This must change. It voilates my sense of design and my desire for simplicity. It goes against my <em>feng shuei</em> if you will. Not the traditional feng shuei more of my own version - one that only cares about mostly about those little annoyances that grate on you every day. Like a towel rack that is placed too high by the sink where you have to reach upwards for it with wet hands - causing water to run down your arms and dampening your shirt cuffs. A minor thing that turns into a huge thing after the thousandth time it happens.</p>

<p>How does that relate to my own personal technology? In more ways than I can count but the focus of my annoyance for the last 10 days has been this blog. It started out innocently enough. Never really <em>tried</em> to develop a lot of traffic. Never really had any  intent to fine tune it&#8217;s SEO. Never had a plan. Just did it the <em>easy</em> way. Wordpress on Dreamhost.com. I hate Wordpress. I dislike Dreamhost.</p>

<p>I hate wordpress on so many levels that I won&#8217;t waste time expaining all of them. First and foremost I hate typing into a browser text box as a writing tool. I hate proofreading it in a browser textbox as well. I solved that but the work-flow was cumbersome. Over time my work-flow of writing and posting has become less cumbersome. That required that I write a couple of tools to make it so. I don&#8217;t want to write tools - well not for wordpress anyway. I don&#8217;t want to debug issues. I don&#8217;t want to recover from security breaches. I just want an elegant set of tools to write, proof, and post. If I wanted to develop tools and solutions I certainly wouldn&#8217;t want to do it for Wordpress. I really don&#8217;t want a content management system of any sort.</p>

<p>It&#8217;s too much infrastructure that I don&#8217;t want. For years I have been toying with the idea of moving off Wordpress. Every once in a while I even put a couple of hours into actually doing a proof of concept with the particular toolset/platform that looks like a good candidate. I have looked at a bunch of them. Played with a bunch of them. In many cases I have actually ended up <em>using</em> some of those candidates for other people&#8217;s projects.</p>

<p>The toolset and platform that I end up coming back to over and over again is <a href="http://jekyllrb.com/">Jekyll</a>. Jekyll is awesome. It&#8217;s elegant. It&#8217;s simple. The tool is completely independent of the deployed content. There is virtually zero infrastructure required to host a site built with Jekyll. Your content, your design, and the function of your site are all completely independent of Jekyll if you want to move to a different way of doing things down the road (with a couple of minor caveats = front matter and Liquid). Last but not least your choice of tools to maintain and extend your site are completely independent of each other.</p>

<p>The rest of this post is a bird&#8217;s eye view of the technologies, associated toolsets, and what&#8217;s - what with respect to Jekyll. Well, it&#8217;s that with a smattering of other things that are cool even without Jekyll. Considerit a semi-annotated tour for the uninitiated, if you will. The motivation for writing this was sparked about a year ago by reading <a href="http://groups.google.com/group/haml/browse_thread/thread/f52b6750507b478">the funniest post ever</a> on a forum that I frequent. Understand that I am not amused by the absolute frustration of the person that opened the thread. I am amused by the amount of background really required in order to use some tools that are amazingly simple.</p>

<p>While there are many many detailed &#8220;how-tos&#8221; out there, most of the good ones make one <strong>huge</strong> assumption - that you understand Ruby, the Ruby community, a lot of the major ruby packages, and a bunch of peripherally related technologies. I will not even attempt to re-write or consolidate the good &#8220;how-tos&#8221;. Instead I will try to provide enough understanding and <em>just enough detail</em> to understand how various things are related to each other, what they do, and why you may or may not want to use them.</p>

<p>First things first. Let&#8217;s start with the do-dads that you will most likely be spending a substantial amount of time with. This would be the tool or tools that you use to actually produce content. For me simple == good. Simple == elegant. Simple == plain text. It can be produced and consumed in more ways with fewer dependancies than any other format. You can choose just about any tool to produce plain text. I happen to use a a particular variety of plain text called <a href="http://daringfireball.net/projects/markdown/basics">markdown</a>. Markdown is just an extremely simple way of adding a couple of common HTML tags to plain text.</p>

<p>I have used just about every plain text editor on the face of the planet. I own just about every one of the new wave of Mac OS X plain text editors out there. From <a href="http://www.hogbaysoftware.com/products/writeroom">WriteRoom</a> to <a href="http://bywordapp.com/">ByWord</a> to <a href="http://www.iawriter.com/">iA Writer</a>. For coding of any kind I continuously come back to good ol&#8217; <a href="http://en.wikipedia.org/wiki/Vi">vi</a>. For prose I have settled in on iA Writer.</p>

<p>While all of the <em>simple</em>, single purpose, highly focused, <em>distraction free</em> text editors that I own are generally pretty good, iA Writer is my choice because I feel that it is the most true to it&#8217;s mission of doing that <strong>one</strong> thing extremely well. It has <strong>no</strong> options. The UI is the most refined. It&#8217;s the prettiest. Oh, and it uses a <a href="http://www.fontshop.com/fonts/downloads/bold_monday/nitti_ot/">font I absolutely love</a> as it&#8217;s one and only font.</p>

<p>There is some degree of critisism regarding iA Writer floating around. They boil down to;</p>

<ul>
<li>Costs too much compared to it&#8217;s competetors - who cares all of them are crazy - disposable - good cup o&#8217; coffee - cheap.</li>
<li>There is no good way to get HTML onto the clipboard directly from iA - Tons of work-arounds that fit nicely within my work-flow.</li>
<li>No support for <a href="http://www.hogbaysoftware.com/products/quickcursor">QuickCursor</a> - Yet.</li>
</ul>


<p>Yep - my main writing environment for anything less than 5,000 words, &#8220;stream of conciousness&#8221; stuff, <strong>and</strong> Wordpress is iA Writer. Actually I use iA Writer for just about all prose and if the final document is large and needs structure it all ends up in <a href="http://www.literatureandlatte.com/scrivener.php">Scrivener</a>. Scrivener loves sucking in little plain text docs. Scrivener is a fantastic large writing project organizational tool. Scrivener is a story for another time.</p>

<p>The one add-on that I use with iA Writer is farily new - <a href="http://markedapp.com/">Marked</a>. Marked is very cool. It&#8217;s lot in life is to render Markdown. The cool part is that it can use any CSS that you want and any Markdown processor that you want. In fact it can process anything because you can specify a custom processor - it doesn&#8217;t have to be Markdown. It also provides a really quick way to put the rendered HTML anywhere you want to, including the clipboard. The only ohter thing that could be considered an <em>add-on</em> I use for plain text prose is <a href="http://www.dropbox.com/">DropBox</a> so that all of my docs are available on all my devices.</p>

<p>So today my blog writing toolset/work-flow consists of writing markdown in iA Writer -> processing to HTML <em>automagically</em> using Marked -> shooting it to the Wordpress API via some cobbled together tools and custom code. Not too bad but I really want to lose the 10 ugly pounds of fat that is Wordpress and associated themes+plug-ins. Enter Jekyll.</p>

<p>Jekyll is extremely simple. In a nutshell it renders a static HTML web site by merging your markdown with HTML layout templates. That&#8217;s it. The resulting set of files can be deployed on pretty much anything that serves up HTML documents. Jekyll is not involved at all in the operating site. Extremely light weight, HTML, CSS, webserver. What&#8217;s not to like? The only thing in addition to out of the box web standards that you need to know is a little bit of something called <a href="http://liquidmarkup.org/">Liquid</a>.</p>

<p>Liquid is a templating language originally developed by the <a href="http://www.shopify.com/">Shopify.com people</a> that is a simple secure way for users to specify variables and basic control logic in HTML templates. The common denominator for both Jekyll and Liquid is that they both are ruby and require a ruby run-time environment. This is where things go terribly awry. Not because you need to know how to progam in ruby. Not that ruby is somehow <em>hard</em>. Things go awry becuase there are a million assumptions made in any of the how-to&#8217;s that the reader knows the ruby environment and the ruby community.</p>

<p>Here are some very opinionated things about the ruby run-time environment that you need to know assuming that you are starting from zero. If you are running windows just forget it. It&#8217;s possible but why bother. Heck it&#8217;s way <em>easier</em> today than it was even a year ago but why endure the pain - any pain. It&#8217;s far far easier and faster just to install Ubuntu Linux in VirtualBox under windows if you <em>must</em> use windows as a platform. It may not be quicker in absolute terms of getting ruby going but will be in terms of everything else &#8220;just working&#8221; as well as up-to-date information and assistance if required. If you are on a Mac or Linux distro as your primary computing platform - both of those are easy-peasy and most likely already have a mostly-functioning ruby environment.</p>

<p>You have two choices to make a fully functional ruby environment. One add the stuff to the system-wide configuration to make it whole. The second being to install <a href="http://beginrescueend.com/">RVM</a> - and then a brand new ruby interpreter and a brand new gems install to your own account environment. If you know what you are doing - choose the first one. If you don&#8217;t choose the RVM way. You don&#8217;t need to learn or even use RVM in any way more than to follow the very simple RVM install instructions. The only reason I am recommending this is that installing a new ruby environment and gems environment is pretty much fool-proof no matter what the state of affairs is with your system-wide configuration or even the OS packaged versions of ruby. If you give a crap RVM is not only useful but also a good example of some fairly slick shell programming.</p>

<p>Hold on there one freaking second - you said <em>&#8220;Gem&#8221;</em>. WTF is a gem? No big deal. Simple answerâ€¦ gems are packages of ruby software. All you need to know about it to get jekyll (and a lot of other things) going is;</p>

<div><script src='https://gist.github.com/1586573.js?file='></script>
<noscript><pre><code>gem install jekyll
</code></pre></noscript></div>


<p>Once you understand that the above command is <em>the</em> way to install software packages - no matter if they are stand-alone or API libraries - you can pretty much use a ton of extremely useful software written in ruby even if you don&#8217;t give a crap about ever learning, using, or seeing a line of ruby code.</p>

<p>Before going hog wild and installing the endless chain of gem <em>stuff</em> that is discussed/assumed/talked about surrounding Jekyll let&#8217;s cover some of the more popular things that you will likely read or hear about so that you can make some decisions about how much gem <em>stuff</em> you want or need. What&#8217;s-what and Who&#8217;s-who.</p>

<p>The first things you will most likely run into when reading anything about Jekyll is the word &#8220;fork&#8221; and the word &#8220;git&#8221;. If you are a developer and have been living under a rock you might want to look into git. If not - forget forking and forget git. Keep it simple and just install the released gems. For the curious <a href="http://git-scm.com/">git</a> is the best version control system I have ever used. For the last few years I have used nothing else and have no plans to. I use git for everything. I cannot say the same thing for any other SCM I have ever had the <del>dis</del>pleasure of being aquainted with. Fork is pretty much refering to using <a href="https://github.com/">github.com</a> to create your own connected version of the software to customize until your heart&#8217;s content. Don&#8217;t want/care to develop your own version of <em>stuff</em> don&#8217;t git - don&#8217;t fork - don&#8217;t care.</p>

<p>There are plenty of names/words/terms that will come up whenever Jekyll is discussed or written about. Generally they are going to be optional extensions that make Jekyll do other things beyond it&#8217;s base funcitonality. Things like supporting tags, categories, other ways of coding layout tempates - you name it. Without even attempting to inventory them all there are a couple of things that come up constantly. Namely Haml, SASS, and Compass.</p>

<p>In the briefest possilbe terms Haml, SASS, and Compass are shortcuts or alternatives to writing HTML and CSS by hand. All three are worth understanding but none are necessary for using Jekyll. In fact they really are general purpose tools and libraries that are incredibly useful in many contexts. I will start with Haml and SASS.</p>

<p>The reason I lumped Haml and SASS together is multifaceted. Both come from the same <em>people</em>. Haml and SASS used to be bundled together in the same ruby gem even though they do not really depend on each other at all from a useage perspective. You can use Haml and forget SASS or vis versa. Haml is shorthand HTML. SASS is shorthand and extended features for CSS. Both can be used as stand-alone utilities from the command line and be extremely useful for putting together HTML and CSS even if ruby is never involved again. In other words you don&#8217;t have to develop ruby applications to use Haml or SASS as amazing utilities themselves.</p>

<p>The main reason <a href="http://haml-lang.com/">Haml</a> is useful is that it&#8217;s syntax maps directly to HTML tags sans the requirement to open and close each tag with all the angle bracket &lt;/bullshit>. You open a tag with %tag and the nesting is completely controlled by indentation level like soâ€¦</p>

<div><script src='https://gist.github.com/1586590.js?file='></script>
<noscript><pre><code>.myclass
  %p.reallycooltype
    Some plain old text
    {% liquid tag %}
    %randomtag
      Some more plain old text or liquid tag which is treated like plain old text</code></pre></noscript></div>


<p>turns intoâ€¦</p>

<div><script src='https://gist.github.com/1586602.js?file='></script>
<noscript><pre><code>&lt;div class=&quot;myclass&quot;&gt;
  &lt;p class=&quot;reallycooltype&quot;&gt;
    Some plain old text
    {% liquid tag %}
    &lt;randomtag&gt;
    &lt;/randomtag&gt;
  &lt;/p&gt;
&lt;/div&gt;</code></pre></noscript></div>


<p>Get it? Sort of? By the way, that &#8220;randomtag&#8221; thing is quite literal. Haml doesn&#8217;t care if it is valid tag. It will put the tag out. This makes Haml extremely useful for templating an amazing amout of things. The amazing thing is that Haml will also run embedded ruby code. When used as an object inside a runtime context this makes for a fantastic templating language with infinite flexibility. But wait, there&#8217;s more. Even without the ruby code anything that is <strong>not</strong> Haml or ruby code is ignored and output as-is. What this means is that you can use the stand-alone Haml processor to output HTML containing <strong>any</strong> text. That text does not have to be static text meant for consumption by humans. It can be yet another templating language. In the context of Jekyll, if you use any of the pre-baked Haml extensions this would mean that Haml outputs HTML with Liquid tags. From Haml&#8217;s point of view the Liquid tags would be plain old static text. From Jekyll&#8217;s point of view they would be interpreted and filled in.</p>

<p>As an aside, the reason I have been dilly-dallying with using Jekyll or not has been my desire to use Haml as the actual templating language alone. Meaning my Jekyll layouts would be Haml with embedded ruby code in contrast with merely a Haml preprocessor that uses Liquid tags. For the most part I was successful in realizing my desires but the code that I <em>forked</em> and modified wasn&#8217;t really maintained and had some behavioral issues that needed care and attention by me. Given my track record with having time for working on my own technology stack, I have no desire to maintain my own branch of Jekyll or anything else. I feel too much like this with Wordpress.</p>

<p>As of right now I have made my peace with Liquid. It&#8217;s not so bad. I do like having the pure power of access to all of the internal context and variables <em>immediately</em> but that is exactly the reason the core Jekyll package will <strong>never</strong> support Haml as a native templating language. If you have the time or the <em>need</em> you can always roll-your-own Liquid extension to do just about anything and understand that there is a standard way to integrate it into Jekyll without maintaining your own version of Jekyll. In the end - this is a lot less work and a better way to go for me for anything that is really not part of my core business focus.</p>

<p>Next up with have the close relative of Haml, <a href="http://sass-lang.com/">SASS</a>. Like Haml SASS is a stand-alone utility which in fact is probably used more as a stand-alone utility rather than integrated in to ruby code. sass as a stand-alone takes two completely different dialects of code and produces plain jane css as output. sass is regularly used outside of ruby world to produce css code either in it&#8217;s raw form or bundled into other tools that use sass as a language.</p>

<p>The two different varieties of code that sass processes are <em>filename</em>.sass and <em>filename</em>.scss. The first variety - sass is of the same philosophy as Haml - short hand and indentation controlled nesting level. The second and newer variety - scss - <em>looks</em> more like css in it&#8217;s structure but includes a lot of the extended features to the css syntax. Both varieties can be extremely expressive comparatively to plain vanilla css. Both are fully supported but as of late scss seems to be the variety that is becoming more preferred and adopted. I am sure that one of the characteristics of scss contributes to this is that the <strong>any</strong> valid css is also valid scss.</p>

<p>Okay - we&#8217;re done with Haml and SASS. Both are absolutely not necessary to use Jekyll but both are heavily used within the community that uses Jekyll and both are highly useful on their own. Even if you never touch a line of ruby code SASS is definitely worth looking at if you do any level of work on CSS. Haml is also worth looking into. The really cool thing about Haml is that the learning curve is so short if you know HTML at all that the very first thing you do with it only takes marginally longer to do it in Haml starting from zero and it becomes so addictive and so fast compared with open tag close tag repeat repetitive motion injury inducing hard to type fluff characters over and overâ€¦ that once you use Haml for the first time - you can not stand to write strait HTML any more. I use Haml for all of my Html work - every bit not just the &#8220;ruby stuff&#8221;.</p>

<p>All of that SASS talk really was a lead up to something else, namely <a href="http://compass-style.org/">Compass</a>. Compass is written in ruby, uses SASS, and unlike the former is used widely outside the ruby community. What does it &#8220;do&#8221;? Well SASS does nothing all by itself. It&#8217;s pretty much a blank slate. Compass on the other hand includes a <em>bunch</em> of standard grid based css frameworks like <a href="http://blueprintcss.org/">blueprint</a> as well as a <em>way of doing things</em>. This is fantastic. At least conceptually. Unlike Haml that can be absorbed and mastered in an hour or two, the learning curve for Compass is kinda large if you are new to any of the grid based frameworks it includes.</p>

<p>If you know them or plan on using them the learning curve is probably well worth the effort. If notâ€¦ well I am by no means a css guru. At the same time I am no neophyte. My exposure to Compass has been limited but intense. With no exceptions, I have failed to make changes to a Compass based CSS in the way the author intended even when I have spent considerable time attempting to grok what the hell was going on and what the authors intent was. Instead I have resorted to using the browser development inspector to see what selectors were matching a particular set of HTML elements I was interested in and jamming plain old css with very specific slectors into a css file that was included last.</p>

<p>Why bring up Compass? For two reasons - One, without fail you will encounter it or even get it as part of an install of other software when playing around in Jekyll world. Two it is a big part of <a href="http://octopress.org/">Octopress</a>. Octopress uses Jeykell, Compass, Rake(ruby&#8217;s build automation tool), a bunch of really nice Liquid extensions, and a pre-cooked set of styles that provide a fairly complete blogging pakage right out of the box with a set way of doing things that is a bit more structured than roll-your-own wild west of Jekyll. In fact Octopress may be the place to start rather than finish if you are interested in using any of this stuff but are not super familiar with the ruby environment. Most people that aren&#8217;t scared to death of the command line can probably get a blog up and running in about 5 minutes with Octopress.</p>

<p>When I first played with Octopress earlier this year I started to develop a dumbass complex that I was the only one that just gave up on understanding Compass&#8217;isms that I myself didn&#8217;t develop from scratch. Especially when dealing with an included framework that I wasn&#8217;t familiar with. Like usual after 30 minutes or so of failing to acheive the desired results, not having a full grasp of what was going on, I just jammed raw css in the last included scss file targeting each specific selector I was interested in at the moment.</p>

<p>I mean come on, I know I am not a &#8220;front end guy&#8221; but I have been around the block more than a couple times. I am not a complete noob here. I felt a little better after reading <a href="http://wynnnetherland.com/journal/octopress-classic-is-the-new-kubrick">this</a> and realizing that 90% of ruby people playing with Octopress are using the box stock theme or just adjusting the colors or including a google font. That stuff is spelled out directly in the custom/scss files. I felt even better seeing <a href="http://nimbupani.com/redesign-notes.html">this</a> and realizing I am not the only one. Ha, I didn&#8217;t even have to resort to &#8220;!important&#8221;</p>

<p>Time to wrap this installment up. iA Writer is telling me this thing is going on 4000 words. A bit much to swallow in your rss reader, huh? Let&#8217;s just summarize a prescription of what you need to get started with some of these wonderful tools.</p>

<ul>
<li>Assume a working c/c++ development environment and pakage installation environment. In the case of a Mac this means Xcode (free from the app store) and MacPorts. You never really have to touch this stuff for the most part it&#8217;s so that ruby gem packages can build native extensions auto magically. Occasionally you may need to do something like port install x to install a dependency like sqlite3-dev headers.</li>
<li>Install rvm as a nice contained, fool proof way to install a pristine USDA approved prime ruby environment and gems.</li>
<li>Install a gem like jekyll or better yet octopress and you are off and running.</li>
</ul>


<p>I realize the audience for this post is going to be small. Consider it my small community service for people that are interested in using some really great tools but might be a little overwhelmed at the assumed base level of understanding that you are likely encounter when you hit some really great and detailed step by step specific recipies out there. Yes you will need those recipes. I hope that this brief drive by will contribute a tiny bit to giving anyone just starting up a bit of contextual understanding.</p>

<p>RB</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WTF]]></title>
    <link href="http://code.rwboyer.com/blog/2012/01/06/wtf/"/>
    <updated>2012-01-06T19:05:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2012/01/06/wtf</id>
    <content type="html"><![CDATA[<p>WTF is a short way of saying what the fuck. And the answer is&#8230;</p>

<blockquote><p>The YAML front matter needs to have comments: true or comments will be false. Meaning no comments.</p></blockquote>


<p>RW
:wq</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Year]]></title>
    <link href="http://code.rwboyer.com/blog/2012/01/05/Another-Year/"/>
    <updated>2012-01-05T00:00:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2012/01/05/Another-Year</id>
    <content type="html"><![CDATA[<p class="meta">5 Jan 2012 - Another Year Of Technology Disappointment</p>


<p>Another year stuck with Liquid, me I rather use ruby but the pain of maintaining and merging branches of Jekyll into my hacked up code base that uses Haml and Ruby directly with all the wonderfull ruby constructs and varialbles available in layouts and pages. It&#8217;s just too painful. So moving on to <em>Octopress</em>. We&#8217;ll see how that goes.</p>

<p>Maybe Liquid is not so bad. I am starting to like it with custom Liquid plug-ins. Just maybe I can live with itâ€¦ Some work on the Octopress Rakefile, a couple of custom Liquid plug-ins. Life is not so so bad. Now if Marked works out&#8230;</p>

<p>Disks vs. circles? Why am I getting disks on one server and circles as bullets with the exact same CSS?</p>

<ul>
<li>CSS is the same</li>
<li>Code is the same</li>
<li>Develop inspector shows the same inheritance.</li>
<li>WTF</li>
</ul>


<p>Node.js, what a crock. The inmates are running the assylum. This is what happens when you spend way too much time jacking around with manipulating browser internals. Some how you manage to actually convince yourself that this is fun and good. Then you go completely around the bend and start trying to convince <em>everyone</em> it&#8217;s fun and good. Hence we have node.js.</p>

<p>I love cell phones. Now you can be twiddled with constantly by everyone but that&#8217;s not why I love them. I love them becuase slowly human beings have become accustomed to really bad phone service, audio quality, and having to repeat themselves a million times. This has prepared us for VOIP. Yea.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MaybeRuby</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ruby?</span>
</span><span class='line'>    <span class="k">return</span> <span class="ss">:true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<div><script src='https://gist.github.com/1571214.js?file='></script>
<noscript><pre><code>class MaybeRuby
  def ruby?
    return :true
  end
end</code></pre></noscript></div>




<blockquote><p>Just a test of things in Octopress - I love static site generators. They are the best things since sliced bread.<br/>Amazing.</p></blockquote>


<p>RB
:wq</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NGINX and Unicorn]]></title>
    <link href="http://code.rwboyer.com/blog/2011/01/19/Nginx/"/>
    <updated>2011-01-19T00:00:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2011/01/19/Nginx</id>
    <content type="html"><![CDATA[<p>So, we have all been reading about the wonders of new stuff to replace our old stuff. Well at least we have if we follow what is going on in the Ruby world even a little bit. Specifically there has been <em>a lot</em> of hub-bub and controversy about NGINX over Apache and Unicorn over Mongrel with increasing frequency in the past year or a little longer.</p>

<p>At first the news was pretty lopsided. NGINIX is <em>WAY</em> faster than Apache and Unicorn is <em>WAY</em> better than Mongrel. Lately there has been a lot of blowback along the lines of <em>Hmmmm, not really</em> Apache/Passenger is fine and works great and has a <strong>BETTER</strong> scaling model. Granted a lot of that blowback has been generated by Passenger developers along with vague references to the <em>next version</em> but still&#8230; It was time to find out for myself. Up goes a bunch of test instances on both EC2 and Rackspace for some playing.</p>

<h2>Bottom Line and Disclaimers</h2>

<ul>
<li>I am not running either NGINX or Unicorn in production</li>
<li>All of my upfront conclusions are based on really small server instnaces</li>
<li>What I am looking at and care about may be <em>way</em> different than you care about.</li>
</ul>


<p>Okay, with that out of the way I can say that SSL processing in NGINX is way more better (read efficient) than it is on Apache. I cannot see how this could be a whole lot different for anybody unless they are doing somthing special with Apache and SSL termination, in which case you could do the same thing with NGINX. For me, I always terminate SSL in the webserver. Historically this has been far easier and less costly to scale than more specialized solutions that get very old very quick.</p>

<p>NGINX seems to use a lot less memory than Apache for the same connection load when nnly proxying and serving static content. Of course this could be way different if Apache or NGINX are doing way different jobs for you than the simple job I tested and normally use. This includes any heavy module use of any kind. Look before you leap. An example could be as simple as Apache having a way better rewrite module than NGINX - I have no idea&#8230; yet.</p>

<p>Bottom line. On a really small server instance I can proxy to almost as many app servers as I can imagine - amazing.</p>

<p>On to Unicorn. Unicorn is going to make my life a lot easier or at the very least, my servers a lot less complicated. With most of my experience over doing it with the queing / buffering at too many layers is a recipie for problems. Especially where there is no need for it. Of course you want to do it if whatever is on the other front-end is somehow the constraint and cannot stand to be held up for even a moment but if that thing (like a multi-threaded, multi-process, multi-connection webserver) is already doing that job quing requests is useless. It doesn&#8217;t make stuff go faster, or increase capacity. In every app I have ever seen, no matter what the underlying tech, doing this just exacerbates the <strong>pain</strong> when you run out of juice at the end of the line or obfuscates intermittent issues.</p>

<p>Having said that I am all for Unicorn&#8217;s request distribution mechanism. Screw the aledged thundering herd issue. You have to be an idiot if you have to scale that big and can&#8217;t avoid that with like more than one Unicorn, on maybe more than one socket. At the end of the day I can get rid of some of the sanity checking and automated bullshit clearing stuff that is running on my servers. Unicorn has a lot of features built in that make deployment/managemet pretty simple without a bunch of dispariate tools wired together at home. I&#8217;ll take that anyday. If I need some monitoring and control on top of that I will probably add BluePill but I am definitely rethinking my current overly complicated mess when I deploy Unicorn in production.</p>

<p>Oh you want some numbers? Okay but that will have to wait a tiny bit. I plan on doing some more formal analysis on both Rackspace and EC2 this week and over the weekend.</p>

<p>RB
:wq</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Circle]]></title>
    <link href="http://code.rwboyer.com/blog/2011/01/19/Full-Circle/"/>
    <updated>2011-01-19T00:00:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2011/01/19/Full-Circle</id>
    <content type="html"><![CDATA[<p>h2. Preface</p>

<p>What prompted this series of random thoughts was partly a rash of <em>switching from Textmate to Vi</em> posts of late and <a href="http://groups.google.com/group/haml/browse_thread/thread/f52b6750507b478">the funniest thing I have ever read</a>. That rant has nothing to do with Textmate to Vi but the context sort of brought the whole thing to a strange focus for me.</p>

<p>In the beginning most of these young innovative web dudes and dude-ettes came up mostly from the M$ Windoze world because that is what they had at home.Upon doing stuff that actually had to work they kinda figured out that Linux/Unix was &#8220;good on the server&#8221;. Then came like this Ruby stuff, really really cool. Now we all know how painful Ruby is on a Windoze box (<em>actually everything is painful on Windoze but you don&#8217;t really know that until you see something like Ruby that doesn&#8217;t have a next, next, next, next, next &#8220;wizard&#8221;</em>). So next comes the move to OS X for these guys/gals. Wow, this works great (shortly there is a realization that this is actually Unix with a way better couple of subsystems al la Apple) and there is this cool thingamagig that you <em>must</em> have called Textmate.</p>

<p>So the word gets around that if you want to do Ruby you gotta have Textmate and that only works on OS X and a Mac. Somewhere the whole Ruby on Unix thing sorta gets subsumed in the Textmate thing.</p>

<p>Fastforward a little bit. Git. Holy crap, this git thing is friggin great. Like Really great. Now you do some cool stuff with Ruby and git hooks and you get github. Wow now we are cookin&#8217;. And&#8230; hey this git thing is actually better on the command line and come to think of it so is a lot of stuff.</p>

<p>Let&#8217;s try this Vi thing (or sometimes this EMACS thing - but I am of the Vi church. What do you expect. I have been a BSD guy since the 80&#8217;s).
Man once you get used to it this Vi thing is quite amazing. I was learning all the shortcuts in Textmate anyway but this, this is really living.</p>

<p>2011 - now we have all the Textmate&#8217;rs writing about how to make the transition to Vi. I happen to agree that there is a lot to be said for the Mac and Vi, and, and&#8230; as <em>the</em> development environment of choice for just about anything but .Not, I mean .Net, or is that dot-net, I don&#8217;t know. I just got there from another place. Here I was thinking that I was stuck on Vi because I am an old fuddy-duddy that can&#8217;t seem to retrain some 20+ year old muscle memories. I guess everything that is old is new again. Or&#8230; Maybe it&#8217;s just that some really great ideas are timeless.</p>

<p>RB
:wq</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Old Business Models Die Hard]]></title>
    <link href="http://code.rwboyer.com/blog/2010/11/20/Mumps/"/>
    <updated>2010-11-20T00:00:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2010/11/20/Mumps</id>
    <content type="html"><![CDATA[<p>Some technology markets astound me. Let&#8217;s take the healthcare market. I am in the process of assisting a medical practice implement a new medical records system. To tell you the truth, this particular system is quite innovative. It&#8217;s built the way I would build it, using technology I would choose today. It&#8217;s delivered as in an ASP model and the client is specificly targed to run on the iPad. Very cool, easy to use, It talks &#8220;doctor&#8221; and knows all of the industry diagnostic codes so that the process of translating the work done to the insurance carrier is <em>automagic</em>. It&#8217;s actually the first system I have seen from a practice automation standpoint that I can really say I could jump on board with no caveats. As in &#8220;it looks okay for something in the medical industry&#8221;. The secret is the people that are behind the company don&#8217;t come from the <em>healtcare technology industry</em>. They come from the world the rest of us live in, you know the 21st century world.</p>

<p>Enough with the preamble. So, this new system has to hook to the old system - a <em>state of the art</em> practice management system to retrieve all the patient info that has already been keyed. No big deal right? Wrong! <strong>Three thousand bucks</strong>. I know what you&#8217;re thinking. You&#8217;re thinking &#8220;that&#8217;s no so bad for coding a bridge to the old data&#8221;. Well you&#8217;re right, it&#8217;s not but that is not what we&#8217;re talking about here. That coding from the new company is <strong>FREE</strong>. Actually there is no real coding, they have a pretty innovative bridge to a bunch of popular systems already done. They also have a bunch of hook-ups to automate ordering reports, diagnostics, etc. The $3000 bucks is to the old software company.</p>

<p>If you aren&#8217;t as tenatious (read pain in the ass) as me, you may not even be curious as to what that $3000 gets you. Well after pulling some threads here is what it gets you. Get ready, hold onto your hats, strap in for this:</p>

<p>The <strong>THREE THOUSAND DOLLARS</strong> buys you the old company installing an ODBC driver on a client machine that already exists and already has access to the old software <em>and</em> the old company types in the presumably hardcoded password to the ODBC driver so that <em>you can access data that you own on a database that you own on software that you own on hardware that you own</em>.</p>

<p>Really - no shit. I can&#8217;t make this stuff up. Great forking business model. Rape your existing customers for delivering no extra value on software that hasen&#8217;t seen a new feature set in a decade. Brilliant stuff. These yo-yo&#8217;s deserve to go out of business.</p>

<p>RB
:wq</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brand New MacBook Air]]></title>
    <link href="http://code.rwboyer.com/blog/2010/11/18/MacBook-Air/"/>
    <updated>2010-11-18T00:00:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2010/11/18/MacBook-Air</id>
    <content type="html"><![CDATA[<p>Normal people try to get the best quatifiable bang for their buck. Normal people that are willing to slam down $1400 in hard earned cash for a new MacBook Air no doubt end up getting the 13&#8221;. I mean who the crap would spend that much on the 11.6 inch model? You would have to be out of your mind. Wouldn&#8217;t you?</p>

<p>Come on, the 13 has a better, bigger screen. It has a faster processor no matter how you slice it. It has a better, longer lasting battery. It has the same 4Gig of memory for the same dinero. Let&#8217;s see - better - better - better. I&#8217;ll take the less better one please. Yep, I maxed out everything on the 11.6 incher and it priced out pretty much the same as a better spec&#8217;d 13.3.</p>

<p>You might say WTF - right. Maybe you are facing the same set of decisions and your highly trained auto reaction is to hit the buy button on the one that is &#8220;better. Here is some food for thought for you:</p>

<ul>
<li><p>Both 11.6 and 13.3 are too too small to do &#8220;big screen&#8221; kind of work on where you need a ton of info blasted at you at the same time. This is the realm of 15&#8221;HD minium (if you like to squint to see the tiny stuff). I got that in my top of the line 15&#8221; MBP. Okay so you don&#8217;t have one of those like me. And you also don&#8217;t have a MacPro w/ 2x27&#8221; Cinemas like me. Great - get a 27&#8221; with a wireless keyboard and mouse for &#8220;big&#8221; work. Both of the MBA&#8217;s will drive it fine.</p></li>
<li><p>Back on point - I am going to write and code on this thing while I am actually portable. I mean really portable. Make mine the small. When I write and/or code, activities that suck down a lot of my time, I <em>live</em> in Terminal.app or full screen wordprocessor of the day (Pages, WriteRoom, Scrivener, etc.) These apps look great fullscreen on either MacBook Air. The look stupid in fullscreen HD+. Well at least they look stupid when you are in type the text mode.</p></li>
<li><p>For my real work pattern of work - close lid - think - open - type - close lid. The 11.6 batter will go all day. That&#8217;s good enough for me.</p></li>
<li><p>1.6Ghz C2D vs 1.83Ghz - for writing/codeing heck even compiling - as we all know unless you are rebuilding all of GNU over and over - anything you can buy (except and Atom) is too too fast to even catch a smoke and think before the build is done.</p></li>
</ul>


<p>My MacBook Air intent is small and focused. I want the smallest and mosted focused device. So why did I max it out. Ummmm now that I think about it, maybe I shouldn&#8217;t have. Ahh what the heck - 128G is not that much storage - I do like my HD. And you just gotta have 4G so you can fire up a couple of server images using Vagrant to test on, etc. Oh and I gotta run Aperture in a pinch without out growing old.</p>

<p>Good luck with your decisions - I waffled on this since the annoucement and finally did the deed today.</p>

<p>RB
:wq</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up new DASD (disk) for use with VM/370 under hercules]]></title>
    <link href="http://code.rwboyer.com/blog/2010/11/16/VM370-new-DASD/"/>
    <updated>2010-11-16T00:00:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2010/11/16/VM370-new-DASD</id>
    <content type="html"><![CDATA[<p>I am a bit rusty on my CP/CMS commands so I tried googling the syntax of something regarding DASD. What I found were about 300 endless threads about setting up new DASD for use as Mini Disks for CMS users. Most of the discussion was off on wild tangents and never really answered the newbie that asked the questions. Here is the long and short of it assuming you have the ever popular starter VM/370 system up and running in hercules.</p>

<p>You will have to know a tiny bit of CMS like how to copy files and use the editor but not a whole lot of other things. This is sort of a place holder in case I have to refer some other people to it.</p>

<script src='http://pastie.org/1303542.js'></script>


<p>I am assuming you are logged on as MAINT and that you have made a copy of the default directory (I believe it is called &#8220;RELEASE6 DIRECT&#8221; on MAINT&#8217;s 194 device) to USER DIRECT on your A minidisk all you need to do now is run DIRECT USER DIRECT and you should be golden. There is no reason to run DMKFMT card deck unless you are generating a new VM and want to setup a new directory, spool, etc. When you log in to your new user you do need to use the CMS FORMAT 191 A command.</p>

<p>RB</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Technology]]></title>
    <link href="http://code.rwboyer.com/blog/2010/11/15/Playing-With-Technology/"/>
    <updated>2010-11-15T00:00:00-05:00</updated>
    <id>http://code.rwboyer.com/blog/2010/11/15/Playing-With-Technology</id>
    <content type="html"><![CDATA[<h2>15 Nov 2010 - VM/370, MySQL Cluster, Vagrant, VBox, Rails3, RVM</h2>

<p>Been playing around a lot with tech lately. Somehow I re-embroiled myself in implementing some solutions for a couple of small businesses over the last couple years. I guess it started with a friend that needed to recover an ancient intel/unix system from a crashed drive&#8230; So guess who was the only person in a large radius that had a clue?</p>

<p>Moving on&#8230; the great thing about open source is not that not much of it isreally &#8220;new&#8221;, heck I was doing half this stuff (conceptually) in the late 80&#8217;s on big iron. The more things change the more they are the same. The great thing is how cheap &#8220;big business solutions&#8221; are for small business. That and some of the tools are pretty amazing in terms of convenience. Vagrant/Chef has to be the best thing since sliced bread.</p>

<p>All of this playing around got me thinking. Why is it that some platforms/languages/tools generate so much devotion and some don&#8217;t. Don&#8217;t get me wrong, I don&#8217;t mean popularity or market penetration, I mean that almost all the users of of <em>some</em> platforms/languages/tools are extreme Zelots vs. mere fans or users.</p>

<p>Multics, VM/CMS, Unix, C, emacs, and a few others seem to stick out as the former. I predict that ruby may become one of those few that have a Zelot like following even after it&#8217;s time has passed and it&#8217;s not &#8220;new&#8221; anymore. Who knows but I have the same feeling about it as I did for some of my other fond tech memories. We&#8217;ll see. Thinkng about some of the good ones got me so teary eyed that I fired up VM/370 over the weekend on <a href="http://www.hercules-390.org/">hercules</a> regen&#8217;d it and then got MVS/TSO, MVT, and a new gen of VM all running under it as virtual machines. Amazing. I even remember alot of 370 assembler. My Core i5 Macbook Pro sure blows the ol&#8217; 3083 into the weeds. It is amazing how efficient the big iron code is even in an emulator. I think the <a href="http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP3083.html">3083</a> is the first machine I worked on - that and a <a href="http://jack.hoaroots.org/b5900.htm">Burroughs B6900</a></p>

<p>More later.</p>

<p>RB</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fotki Amongst Others]]></title>
    <link href="http://code.rwboyer.com/blog/2010/04/18/Fotki+Amongst+Others/"/>
    <updated>2010-04-18T00:00:00-04:00</updated>
    <id>http://code.rwboyer.com/blog/2010/04/18/Fotki Amongst Others</id>
    <content type="html"><![CDATA[<p>I am not a big fan of FLICKR - ever since they cancelled my paid account about a month into it and get this&#8230; I never ever even received an email about why. This made me so angry that I tried for 3 months to contact anyone at Flickr and Yahoo to no avail. I sent emails, I tried every single means in every single channel after digging and digging - Nada, nothing. Not a peep as to why. No response.</p>

<p>So I guess I will try this&#8230; Pretty neat for free.</p>

<p><img src="http://hotimg23.fotki.com/a/38_102/24_215/2000-034-15.jpg"></p>

<p>RB</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For The Love Of Ruby]]></title>
    <link href="http://code.rwboyer.com/blog/2010/04/17/For+The+Love+Of+Ruby/"/>
    <updated>2010-04-17T00:00:00-04:00</updated>
    <id>http://code.rwboyer.com/blog/2010/04/17/For The Love Of Ruby</id>
    <content type="html"><![CDATA[<h2>17 Apr 2010 - Along Way From Home</h2>

<p>Well, I am sick and tired of WordPress. Really I am sick of the whole mess that is PHP land. A long long time ago in a galaxy far far away, I was a software developer for about 18 years - accidently. You see I went to school for Physics and Math and chucked in a CompSci major for the fun of it then accidently spent 18 years screwing around with computer crap. Then I sort of semi-retired and did the commercial photography thing - then I got sick of it when it felt just like.</p>

<p>Anyway here we are. Every time I mess around with my site I have to fix somebody&#8217;s crappy PHP code. The issue is some of the stuff I want to get done with it leaves me&#8230; dreading looking at the mess of fork-lift reuse and horrendously bad crap that is WordPress plug-in&#8217;s, themes, etc, etc. I really wouldn&#8217;t mind if it was even remotely elegant, clever, cool&#8230; pretty but it is not. When I came across this stuff in my professional life I &#8220;refactored&#8221; it - a nice way of saying ditch it and start over. The problem is that I really do not want to write software any more - if I did I would. The pay is fantastic. Now I enjoy fooling around with a few things here and there for pure recreation. When doing that I will only use the tools I actually love to use. I can write C in my sleep and as long as any code that touches mine is fantastically good I don&#8217;t mind that. Forget C++, not because it is bad - it is just the majority of the frameworks blow and again it is a hopeless mess done mostly by people that have not a clue. Cutting to the chase the two things I am willing to mess with at this point are Obj-C (just for the cool Cocoa frameworks so I can mess with new Apple stuff and my real love - Ruby.</p>

<p>Not that Ruby is a holy grail or anything - it is just the community is sooooo.. much different. It seems that language, and all of the frameworks, and conventions, and tools were brought into existence by software developers - real ones. Where PHP and the world around it seems to be the creation of VB knuckle heads and a few McDonalds fry cooks that hacked around in a Wordpress theme for a couple of weeks to get it to work. So&#8230; I think I might abandon Wordpress, the entire reason I use it is that I didn&#8217;t want any &#8220;computer work&#8221; while publishing my little blog. Trying to navigate that WordPress plug-in mess to find things that actually work and work the way I want them to is a nightmare. If I am going to have to screw with this stuff for more than 10 minutes then I may as well just do it myself - or at least the parts that I want to.</p>

<p>Here is my rediculously quick and dirty &#8220;conversion&#8221; of the old site with virtually no work. Behind the scenes there is a lot going on here, I just didn&#8217;t feel like dealling with the CSS for the other stuff yet. The really cool part is I actually wrote a custom WordPress converter in IRB that took 5 minutes with DataMapper and then grabbed a copy of the source of <a href="http://github.com/mojombo/jekyll">Jekyll</a> and coverted it to use HAML AND SASS so I wouldn&#8217;t have to blow my brains out closing HTML tags. Heck I use HAML/SASS to create any HTML or CSS that I have to do vs getting some sort of repetitive motion injuries from all the </screw you> nonsence.</p>

<p>The other really nice thing is that I can either host it statcally as I am doing over on <a href="http://rwboyer.github.com/">GitHub</a> or I can do it dynamically. The best part is for all the parts that need to be dynamic - as in server side code - I can just write them as lightweight web services with RACK/Sinatra.
Yes I think I am done with the whole PHP/Wordpress shitty ass mess.</p>

<p>RB</p>
]]></content>
  </entry>
  
</feed>
